set nocompatible            " don't worry about being compatible with Vi

" COLORS {{{

syntax enable                   " enable syntax highlighting
set cursorline                  " highlight current line
set colorcolumn=81              " highlight column 81

set background=dark                 " dark mode
let g:gruvbox_sign_column = 'bg0'   " use normal bg color in sign column
let g:gruvbox_italic = 1            " use italics, even in the terminal
let g:gruvbox_termcolors = 16       " use the terminal pallete
let g:gruvbox_guisp_fallback = 'fg' " color fg instead of guisp in terminal
colorscheme gruvbox                 " my preferred colorscheme

" set languages to be highlighted within markdown
let g:markdown_fenced_languages = ['python', 'javascript']

" }}}

" INDENTATION {{{

set tabstop=4               " number of visual spaces per tab
set softtabstop=4           " number of spaces inserted when tab key is pressed
set shiftwidth=4            " number of columns to indent with >>
set shiftround              " indent to next multiple of shiftwidth with >>
set expandtab               " insert spaces when tab key is pressed
set autoindent              " turn on autoindent
set smartindent             " be smarter about autoindenting

" }}}

" LIST CHARS {{{

set list                    " show invisible characters, as described below
set listchars=tab:>\ ,trail:.,precedes:<,extends:>

" }}}

" LINES {{{

set number                  " show line numbers
set scrolloff=5             " always show at least 5 lines below the cursor
set wrap                    " wrap long lines
set linebreak               " wrap lines at whitespace, not mid-word
set textwidth=0             " don't auto-break lines at any width

" }}}

" SEARCH {{{

set incsearch               " search as characters are typed
set hlsearch                " highlight matches
set path+=**                " recursively search sub-folders when finding files
set ignorecase              " make searches case-insensitive
set smartcase               " make searches case-sensitive if capitals used
set shortmess-=S            " show current search match count in message line

" }}}

" FOLDING {{{

set foldenable              " enable folding
set foldlevelstart=10       " auto-fold things starting at 10 levels deep
set foldmethod=manual       " disable automatic fold generation - it's slow
let g:markdown_folding=1    " make folding work for markdown - must set before
                            " built-in markdown ftplugin file is loaded

" }}}

" STATUS LINE {{{

set laststatus=2            " always display the status line
set statusline=%f\          " filename
set statusline+=%h%w%r%m    " flags
set statusline+=%y          " filetype

" show command that created quickfix window if relevant
set statusline+=%{exists('w:quickfix_title')?'\ '.w:quickfix_title:''}

set statusline+=%=          " switch to right side of screen
set statusline+=%c,\        " cursor column
set statusline+=%l\ /\ %L\  " cursor line / total lines
set statusline+=\ \         " some space
set statusline+=%P          " percent through file

set showcmd                   " show commands as they're being typed
let g:qf_disable_statusline=1 " don't change statusline for quickfix window

" }}}

" TAB COMPLETION {{{

set wildmenu                " show possible matches

" ignore files I probably don't want to open in vim
set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.jpeg,*.png
set wildignore+=*.pdf,*.doc,*.docx,*.xls,*.xlsx,*.odt,*.ods,*.odg
set wildignore+=node_modules/*,bower_components/*
set wildignore+=*.min.css,*.min.js
set wildignore+=*.o,*.obj

" }}}

" BACKSPACE {{{

set backspace=indent        " allow backspacing over autoindent
set backspace+=eol          " allow backspacing over line breaks
set backspace+=start        " allow backspacing over the start of insert

" }}}

" NETRW {{{

let g:netrw_banner = 0      " don't show banner
let g:netrw_liststyle = 3   " use tree-style list
let g:netrw_winsize = 25    " when opening in a split, only use 25% of space

" }}}

" VIM FILES {{{

set undofile    " persist undo history across buffer unloads

set backupdir=~/.vim/files/backup//,.   " where to put backup files
set directory=~/.vim/files/swap//,.     " where to put swap files
set undodir=~/.vim/files/undo//,.       " where to put undo files
set viminfofile=~/.vim/files/viminfo    " where to keep the viminfo file

" }}}

" KEY MAPPINGS {{{

let mapleader = " "         " set leader to space

" temporary mappings to teach me not to navigate with the arrow keys
inoremap <Up> <Nop>
inoremap <Left> <Nop>
inoremap <Right> <Nop>
inoremap <Down> <Nop>
nnoremap <Up> <Nop>
nnoremap <Left> <Nop>
nnoremap <Right> <Nop>
nnoremap <Down> <Nop>

" easy access to fzf
nnoremap <Leader>o :FZF<CR>

" easy buffer management - shows list of buffers and then prepares buffer cmd
nnoremap <Leader>b :buffers<CR>:b<Space>

" easy access to ripgrep
nnoremap <Leader>s <Esc>:Rg<Space>

" easy saving from insert or normal mode - requires no-flow-control.bash
nnoremap <silent> <C-S> :update<CR>
inoremap <silent> <C-S> <C-O>:update<CR>

" easy access to personal cheatsheet
nnoremap <Leader>? :help cheatsheet-contents<CR>

" show all occurrences of word under cursor in current buffer in location list
fun! FindInFile()
    execute 'lvimgrep /\C'.expand('<cword>').'/gj '.expand('%') | :lopen
endfun
nnoremap <Leader>8 :execute FindInFile()<CR>

" easy formatting of the entire file without losing cursor position
nnoremap <silent> <Leader>gq mFgggqG`F

" }}}

" MISC {{{

set belloff=esc,insertmode  " no bell when pressing esc
set signcolumn=yes          " always show sign column

filetype plugin indent on   " load plugins, indent files based on filetype
packadd! matchit            " enable improved % matching

" restore cursor position when opening file
autocmd BufReadPost *
    \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
    \ |   exe "normal! g`\""
    \ | endif

set hidden                  " allow switching buffers without saving

" fzf integration on macOS - must go in vimrc
if isdirectory("/usr/local/opt/fzf")
    set rtp+=/usr/local/opt/fzf
endif

let g:AutoPairsCenterLine = 0 " don't move to center when pressing <CR> after {
let g:AutoPairsMultilineClose = 0 " don't jump to closing bracket on next line

" }}}

" vim:foldmethod=marker:foldlevel=0
